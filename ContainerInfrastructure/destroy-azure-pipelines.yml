trigger: none

resources:
- repo: self

variables:
  # Terraform
  workingDirectory : '$(System.DefaultWorkingDirectory)/ContainerInfrastructure/Terraform'
  environmentServiceName : 'Workload Identity Federation Connection'
  azServiceConnection: 'terraform-azure-connection'
  backendAzureRmResourceGroupName: 'terraform-prod'
  backendAzureRmStorageAccountName: 'terraformprod1784531786'
  backendAzureRmContainerName: 'shared-tf-storage'
  backendAzureRmKey: 'terraform-prod'

stages:
- stage: Infrastructure
  displayName: Provision Infrastructure
  jobs:
  - job: Install
    displayName: Install Terraform
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
  - job: Provision
    displayName: Provision Resources
    steps:
    - task: TerraformCLI@1
      displayName: Terraform Innit
      inputs:
        command: 'init'
        workingDirectory: $(workingDirectory)
        backendType: 'azurerm'
        backendServiceArm: $(environmentServiceName)
        backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
        backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
        backendAzureRmContainerName: $(backendAzureRmContainerName)
        backendAzureRmKey: $(backendAzureRmKey)
        allowTelemetryCollection: true
    - task: TerraformCLI@1
      displayName: Terraform Validate
      inputs:
        command: 'validate'
        workingDirectory: $(workingDirectory)
        allowTelemetryCollection: true
    - task: TerraformCLI@1
      displayName: Terraform Destroy
      inputs:
        command: 'destroy'
        workingDirectory: $(workingDirectory)
        environmentServiceName: $(environmentServiceName)
        allowTelemetryCollection: true